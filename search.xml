<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>JavaWeb部分知识点</title>
      <link href="/2022/062315155.html"/>
      <url>/2022/062315155.html</url>
      
        <content type="html"><![CDATA[<h1 id="JavaWeb"><a href="#JavaWeb" class="headerlink" title="JavaWeb"></a>JavaWeb</h1><h2 id="JavaWeb中的中文乱码问题"><a href="#JavaWeb中的中文乱码问题" class="headerlink" title="JavaWeb中的中文乱码问题"></a>JavaWeb中的中文乱码问题</h2><h3 id="对于GET请求："><a href="#对于GET请求：" class="headerlink" title="对于GET请求："></a>对于GET请求：</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">//URL编码String value = URLEncoder.encode(value,"UTF-8"); //将value编码转换成URL编码，因为浏览器不支持中文//URL解码value = URLDecoder.decode(value,"UTF-8");//将value中的URL编码按照UTF-8的编码来解码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="对于POST请求："><a href="#对于POST请求：" class="headerlink" title="对于POST请求："></a>对于POST请求：</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">// 处理POST请求出现乱码的问题request.setCharacterEncoding("UTF-8");//可以直接设置POST请求中的编码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="JavaWeb中的三层架构"><a href="#JavaWeb中的三层架构" class="headerlink" title="JavaWeb中的三层架构"></a>JavaWeb中的三层架构</h2><p><img src="https://user-images.githubusercontent.com/94377490/175250753-87dcbc76-d3e4-4d57-843e-385bb47466b0.png" alt="image-20220416175709960"></p><p><img src="https://user-images.githubusercontent.com/94377490/175250762-ac63b018-7290-4a06-ae1c-a7b884eb6184.png" alt="image-20220416175755385"></p><h2 id="会话跟踪技术"><a href="#会话跟踪技术" class="headerlink" title="会话跟踪技术"></a>会话跟踪技术</h2><h3 id="Cookie的基本使用"><a href="#Cookie的基本使用" class="headerlink" title="Cookie的基本使用:"></a>Cookie的基本使用:</h3><h4 id="1-创建对象，设置数据"><a href="#1-创建对象，设置数据" class="headerlink" title="1.创建对象，设置数据"></a>1.创建对象，设置数据</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">Cookie cookie = new Cookie("key","value");<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2-发送Cookie到客户端：使用response对象"><a href="#2-发送Cookie到客户端：使用response对象" class="headerlink" title="2.发送Cookie到客户端：使用response对象"></a>2.发送Cookie到客户端：使用response对象</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">response.addCookie(cookie);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="3-获取客户端携带的所有Cookie，使用request对象"><a href="#3-获取客户端携带的所有Cookie，使用request对象" class="headerlink" title="3.获取客户端携带的所有Cookie，使用request对象"></a>3.获取客户端携带的所有Cookie，使用request对象</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">Cookie[] cookies = request.getCookies();<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="4-遍历数组，获取每一个Cookie对象"><a href="#4-遍历数组，获取每一个Cookie对象" class="headerlink" title="4.遍历数组，获取每一个Cookie对象"></a>4.遍历数组，获取每一个Cookie对象</h4><p>可以使用for循环遍历数组</p><h4 id="5-使用Cookie对象方法获取数据"><a href="#5-使用Cookie对象方法获取数据" class="headerlink" title="5.使用Cookie对象方法获取数据"></a>5.使用Cookie对象方法获取数据</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">cookie.getName();cookie.getValue();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="Cookie设置存活时间："><a href="#Cookie设置存活时间：" class="headerlink" title="Cookie设置存活时间："></a>Cookie设置存活时间：</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">setMaxAge(int seconds); //以秒为单位<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="Session的基本使用："><a href="#Session的基本使用：" class="headerlink" title="Session的基本使用："></a>Session的基本使用：</h3><h4 id="1-获取Session对象"><a href="#1-获取Session对象" class="headerlink" title="1.获取Session对象"></a>1.获取Session对象</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">HttpSession session = request.getSession();<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2-Session对象功能："><a href="#2-Session对象功能：" class="headerlink" title="2.Session对象功能："></a>2.Session对象功能：</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">void setAttribute(String name,Object o); //存储数据到session域中Object getAttribute(String name); //根据key，获取值void removeAttribute(String name); //根据key，删除该键值对<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="小结："><a href="#小结：" class="headerlink" title="小结："></a>小结：</h3><p><em><strong>Cookie和Session都是来完成一次会话内多次请求间数据共享的</strong></em></p><p>区别：</p><ul><li>存储位置：Cookie是将数据存储在客户端，Session将数据存储在服务端</li><li>安全性：Cookie不安全，Session安全</li><li>数据大小：Cookie最大3KB，Session无大小限制</li><li>存储时间：Cookie可以长期存储，Session默认30分钟</li><li>服务器性能：Cookie不占服务器资源，Session占用服务器资源</li></ul><h2 id="图片验证码问题"><a href="#图片验证码问题" class="headerlink" title="图片验证码问题"></a>图片验证码问题</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java">ServletOutputStream outputStream = response.getOutputStream();String checkCode = CheckCodeUtil.outputVerifyImage(100, 50, outputStream, 4);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在servlet中获得输出流，调用<em><strong>CheckCodeUtil</strong></em>工具类的<em><strong>outputVerifyImage</strong></em>方法即可生成验证码图片并输出。</p><p>CheckCodeUtil工具类如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">package com.zhang.util;import javax.imageio.ImageIO;import java.awt.*;import java.awt.geom.AffineTransform;import java.awt.image.BufferedImage;import java.io.File;import java.io.FileOutputStream;import java.io.IOException;import java.io.OutputStream;import java.util.Arrays;import java.util.Random;/** * 生成验证码工具类 */public class CheckCodeUtil {    public static final String VERIFY_CODES = "123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";    private static Random random = new Random();    /**     * 输出随机验证码图片流,并返回验证码值（一般传入输出流，响应response页面端，Web项目用的较多）     *     * @param w     * @param h     * @param os     * @param verifySize     * @return     * @throws IOException     */    public static String outputVerifyImage(int w, int h, OutputStream os, int verifySize) throws IOException {        String verifyCode = generateVerifyCode(verifySize);        outputImage(w, h, os, verifyCode);        return verifyCode;    }    /**     * 使用系统默认字符源生成验证码     *     * @param verifySize 验证码长度     * @return     */    public static String generateVerifyCode(int verifySize) {        return generateVerifyCode(verifySize, VERIFY_CODES);    }    /**     * 使用指定源生成验证码     *     * @param verifySize 验证码长度     * @param sources    验证码字符源     * @return     */    public static String generateVerifyCode(int verifySize, String sources) {        // 未设定展示源的字码，赋默认值大写字母+数字        if (sources == null || sources.length() == 0) {            sources = VERIFY_CODES;        }        int codesLen = sources.length();        Random rand = new Random(System.currentTimeMillis());        StringBuilder verifyCode = new StringBuilder(verifySize);        for (int i = 0; i &lt; verifySize; i++) {            verifyCode.append(sources.charAt(rand.nextInt(codesLen - 1)));        }        return verifyCode.toString();    }    /**     * 生成随机验证码文件,并返回验证码值 (生成图片形式，用的较少)     *     * @param w     * @param h     * @param outputFile     * @param verifySize     * @return     * @throws IOException     */    public static String outputVerifyImage(int w, int h, File outputFile, int verifySize) throws IOException {        String verifyCode = generateVerifyCode(verifySize);        outputImage(w, h, outputFile, verifyCode);        return verifyCode;    }    /**     * 生成指定验证码图像文件     *     * @param w     * @param h     * @param outputFile     * @param code     * @throws IOException     */    public static void outputImage(int w, int h, File outputFile, String code) throws IOException {        if (outputFile == null) {            return;        }        File dir = outputFile.getParentFile();        //文件不存在        if (!dir.exists()) {            //创建            dir.mkdirs();        }        try {            outputFile.createNewFile();            FileOutputStream fos = new FileOutputStream(outputFile);            outputImage(w, h, fos, code);            fos.close();        } catch (IOException e) {            throw e;        }    }    /**     * 输出指定验证码图片流     *     * @param w     * @param h     * @param os     * @param code     * @throws IOException     */    public static void outputImage(int w, int h, OutputStream os, String code) throws IOException {        int verifySize = code.length();        BufferedImage image = new BufferedImage(w, h, BufferedImage.TYPE_INT_RGB);        Random rand = new Random();        Graphics2D g2 = image.createGraphics();        g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);        // 创建颜色集合，使用java.awt包下的类        Color[] colors = new Color[5];        Color[] colorSpaces = new Color[]{Color.WHITE, Color.CYAN,                Color.GRAY, Color.LIGHT_GRAY, Color.MAGENTA, Color.ORANGE,                Color.PINK, Color.YELLOW};        float[] fractions = new float[colors.length];        for (int i = 0; i &lt; colors.length; i++) {            colors[i] = colorSpaces[rand.nextInt(colorSpaces.length)];            fractions[i] = rand.nextFloat();        }        Arrays.sort(fractions);        // 设置边框色        g2.setColor(Color.GRAY);        g2.fillRect(0, 0, w, h);        Color c = getRandColor(200, 250);        // 设置背景色        g2.setColor(c);        g2.fillRect(0, 2, w, h - 4);        // 绘制干扰线        Random random = new Random();        // 设置线条的颜色        g2.setColor(getRandColor(160, 200));        for (int i = 0; i &lt; 20; i++) {            int x = random.nextInt(w - 1);            int y = random.nextInt(h - 1);            int xl = random.nextInt(6) + 1;            int yl = random.nextInt(12) + 1;            g2.drawLine(x, y, x + xl + 40, y + yl + 20);        }        // 添加噪点        // 噪声率        float yawpRate = 0.05f;        int area = (int) (yawpRate * w * h);        for (int i = 0; i &lt; area; i++) {            int x = random.nextInt(w);            int y = random.nextInt(h);            // 获取随机颜色            int rgb = getRandomIntColor();            image.setRGB(x, y, rgb);        }        // 添加图片扭曲        shear(g2, w, h, c);        g2.setColor(getRandColor(100, 160));        int fontSize = h - 4;        Font font = new Font("Algerian", Font.ITALIC, fontSize);        g2.setFont(font);        char[] chars = code.toCharArray();        for (int i = 0; i &lt; verifySize; i++) {            AffineTransform affine = new AffineTransform();            affine.setToRotation(Math.PI / 4 * rand.nextDouble() * (rand.nextBoolean() ? 1 : -1), (w / verifySize) * i + fontSize / 2, h / 2);            g2.setTransform(affine);            g2.drawChars(chars, i, 1, ((w - 10) / verifySize) * i + 5, h / 2 + fontSize / 2 - 10);        }        g2.dispose();        ImageIO.write(image, "jpg", os);    }    /**     * 随机颜色     *     * @param fc     * @param bc     * @return     */    private static Color getRandColor(int fc, int bc) {        if (fc &gt; 255) {            fc = 255;        }        if (bc &gt; 255) {            bc = 255;        }        int r = fc + random.nextInt(bc - fc);        int g = fc + random.nextInt(bc - fc);        int b = fc + random.nextInt(bc - fc);        return new Color(r, g, b);    }    private static int getRandomIntColor() {        int[] rgb = getRandomRgb();        int color = 0;        for (int c : rgb) {            color = color &lt;&lt; 8;            color = color | c;        }        return color;    }    private static int[] getRandomRgb() {        int[] rgb = new int[3];        for (int i = 0; i &lt; 3; i++) {            rgb[i] = random.nextInt(255);        }        return rgb;    }    private static void shear(Graphics g, int w1, int h1, Color color) {        shearX(g, w1, h1, color);        shearY(g, w1, h1, color);    }    private static void shearX(Graphics g, int w1, int h1, Color color) {        int period = random.nextInt(2);        boolean borderGap = true;        int frames = 1;        int phase = random.nextInt(2);        for (int i = 0; i &lt; h1; i++) {            double d = (double) (period &gt;&gt; 1)                    * Math.sin((double) i / (double) period                    + (6.2831853071795862D * (double) phase)                    / (double) frames);            g.copyArea(0, i, w1, 1, (int) d, 0);            if (borderGap) {                g.setColor(color);                g.drawLine((int) d, i, 0, i);                g.drawLine((int) d + w1, i, w1, i);            }        }    }    private static void shearY(Graphics g, int w1, int h1, Color color) {        int period = random.nextInt(40) + 10; // 50;        boolean borderGap = true;        int frames = 20;        int phase = 7;        for (int i = 0; i &lt; w1; i++) {            double d = (double) (period &gt;&gt; 1)                    * Math.sin((double) i / (double) period                    + (6.2831853071795862D * (double) phase)                    / (double) frames);            g.copyArea(i, 0, 1, h1, 0, (int) d);            if (borderGap) {                g.setColor(color);                g.drawLine(i, (int) d, i, 0);                g.drawLine(i, (int) d + h1, i, h1);            }        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在验证码刷新的过程中，如果绑定的事件只是跳转到对应的Servlet，则验证码并不会一直刷新，因此需要在对应的事件的src后加入永远不会重复的值即可，Date().getMilliseconds()方法可以很好的解决该问题，代码如下：</p><p>其中 <em><strong>/brand-demo/checkCodeServlet</strong></em> 为生成验证码的servlet</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">document.getElementById("changeImg").onclick = function (){    document.getElementById("checkCodeImg").src = "/brand-demo/checkCodeServlet?"+new Date().getMilliseconds();}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="部分配置文件："><a href="#部分配置文件：" class="headerlink" title="部分配置文件："></a>部分配置文件：</h2><h3 id="mybatis-config-xml"><a href="#mybatis-config-xml" class="headerlink" title="mybatis-config.xml"></a>mybatis-config.xml</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;&lt;!DOCTYPE configuration        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"        "http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;&lt;configuration&gt;    &lt;!-- 别名--&gt;    &lt;typeAliases&gt;        &lt;package name="com.zhang.pojo"/&gt;    &lt;/typeAliases&gt;    &lt;!--    environments:配置数据库连接环境信息，可以配置多个environment，通过default属性切换不同的environment    --&gt;    &lt;environments default="development"&gt;        &lt;environment id="development"&gt;            &lt;transactionManager type="JDBC"/&gt;            &lt;dataSource type="POOLED"&gt;                &lt;!-- 连接信息--&gt;                &lt;property name="driver" value="com.mysql.jdbc.Driver"/&gt;                &lt;property name="url" value="jdbc:mysql:///db1?characterEncoding=utf8&amp;useServerPrepStmts=true"/&gt;                &lt;property name="username" value="root"/&gt;                &lt;property name="password" value="123456"/&gt;            &lt;/dataSource&gt;        &lt;/environment&gt;    &lt;/environments&gt;    &lt;mappers&gt;        &lt;!--加载sql映射文件--&gt;        &lt;!--&lt;mapper resource="com/zhang/Mapper/StudentMapper.xml"/&gt;--&gt;        &lt;!--Mapper代理方式--&gt;        &lt;package name="com.zhang.mapper"/&gt;    &lt;/mappers&gt;&lt;/configuration&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="SqlSessionFactoryUtils工具类："><a href="#SqlSessionFactoryUtils工具类：" class="headerlink" title="SqlSessionFactoryUtils工具类："></a>SqlSessionFactoryUtils工具类：</h3><p>用来创建并返回sqlSessionFactory，增加代码的复用性。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">package com.zhang.util;import org.apache.ibatis.io.Resources;import org.apache.ibatis.session.SqlSessionFactory;import org.apache.ibatis.session.SqlSessionFactoryBuilder;import java.io.IOException;import java.io.InputStream;public class SqlSessionFactoryUtils {    private static SqlSessionFactory sqlSessionFactory;    //静态代码块会随着类的创建而执行，而且只执行一次    static {        try {            String resource = "mybatis-config.xml";            InputStream inputStream = Resources.getResourceAsStream(resource);            sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);        } catch (IOException e) {            e.printStackTrace();        }    }    public static SqlSessionFactory getSqlsessionFactory(){        return sqlSessionFactory;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/062216107.html"/>
      <url>/2022/062216107.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new "My New Post"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
